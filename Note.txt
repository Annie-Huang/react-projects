Code 15 React Projects - Complete Course
(https://www.youtube.com/watch?v=a_7Z7C_JCyo&t=31s)

https://github.com/john-smilga/react-projects
https://react-projects.netlify.app/
https://www.johnsmilga.com
https://www.johnsmilga.com/projects

https://github.com/Annie-Huang/react-projects

https://react-icons.github.io/react-icons/
https://react-icons.github.io/react-icons/icons?name=di  << search for github, e.g. FaGithubSquare is a font awesome icons. Then you go to the Font Awesome link below to see how to import it.
https://react-icons.github.io/react-icons/icons?name=fa
https://github.com/noeldelgado/values.js
https://www.thecocktaildb.com/api.php
https://www.thecocktaildb.com/api/json/v1/1/search.php?s=margarita
https://www.thecocktaildb.com/api/json/v1/1/lookup.php?i=11007
============================================================

Highline:
Project 2:
- Good async and await function for fetch in useEffect
- Nice one on {readMore ? info : `${info.substring(0, 200)}...`}
- Pass unrelated information as props to the same child
    <Tour key={tour.id} {...tour} removeTour={removeTour} />
    const Tour = ({id, image, info, price, name, removeTour}) => {..}
    export default Tour;
- Different between
    - onClick={() => fetchTours()}
    - onClick={fetchTours}
    - onClick={fetchTours()}

Project 3:
- Do a function call within setIndex so the index will update to the correct value within the current cycle.
    setIndex(() => {
      return index === people.length-1 ? 0 : index+1
    });
- Math.floor((Math.random() * people.length)) to get a random number

Project 4:
- If statement in react better to do it as {showInfo && <p>{info}</p>} rather than {showInfo ? <p>{info}</p> : null }

Project 5:
- [...new Set(items.map(item => item.category))]; to get the distinct values from an array of objects

Project 6:
- Can do evaluation on class like: className={`job-btn ${index === value && 'active-btn'}`}

Project 7:
- Smart way to to circular looping through an array through useEffect, button clicks, and set activeSlide|lastSlide|nextSlide
- Smart way of doing setInterval in useEffect
  useEffect(() => {
    let slider = setInterval(() => {
      setIndex(index + 1);
    }, 3000);
    return () => clearInterval(slider);
  }, [index])

Project 8:
- Simple form of a input field and a submit button

Project 9:
- Simple form of a input field and a submit button
- DOM method to manually copy text on element clicks
- Smart way of doing setTimeout in useEffect
  useEffect(() => {
    let timeout = setTimeout(() => {
      setAlert(false);
    }, 3000);
    return () => clearTimeout(timeout);
  }, [alert]);

Project 10:
- Basically a todo list app with edit|delete|delete all function.
- Another way to do form submit: put onSubmit in form tag rather than onClick of the button tag
      <form className='grocery-form' onSubmit={handleSubmit}>
          <input type='text' />
          <button type='submit' className='submit-btn'>
            {isEditing ? 'edit' : 'submit'}
          </button>
      </form>
- Very good way to useEffect to clear out alert after 3 seconds and clear out setTimeout as well

Project 11:
- If you use {showLinks && <Component></Component>}, you cannot add animation for open and collapse because it's mount|unmount element.
  Solution is always keep element there but use css to control the display.
  method1:
  <Component className={`${showLinks ? 'show-container' : ''} links-container`}></Component>
  .links-container {
    height: 0;
    overflow: hidden;
    transition: var(--transition);
  }
  .show-container {
    height: 10rem;
  }
  method2:
    useEffect(() => {
      const linksHeight = linksRef.current.getBoundingClientRect().height;
      if (showLinks) {
        linksContainerRef.current.style.height = `${linksHeight}px`;
      } else {
        linksContainerRef.current.style.height = '0px';
      }
    }, [showLinks]);
    <Component className='links-container' ref={linksContainerRef}>
      <ul className='links' ref={linksRef}>
    </Component>
  But very important to do this, otherwise in desktop, if it's already 0px in mobile, the container will keep disappear when resizing.
  @media screen and (min-width: 800px) {
    .links-container {
        height: auto !important;
    }
  }

Project 12:
- Good explanation on how to use useContext
- Can only use the react hook in a component or in a custom hook.

Project 13:
- Good useRef example.
- Good example of how to calculate the middle position of the menu button and calculate the width required for the submenu container.

Project 14:
- Example to use useReducer and useContext for global store in AppContext.
- For value that can be driven from the current state value, use the useEffect to watch the state to call dispatch to update other state.
- Use async|await to fetch data on page load (useEffect) and dispatch action to assign result to state.

Project 15:
- Routing, Navbar and Links
- Simple form with one <input> with useRef to trigger AppContext method onChange
- set focus on input on pageload (useEffect, useRef)
==========================================================================
C:\react\react-projects\1-birthday-reminder>npm install




onClick function
=======================
  if(tours.length === 0) {
    return <main>
        <button className='btn' onClick={() => fetchTours()}>Refresh</button>
        <button className='btn' onClick={fetchTours}>Refresh</button>			<<< This one is the same as the first one, you can use this short cut to do the first one if it doesn't need to pass in parameter
    </main>
  }

But this is different from
	<button className='btn' onClick={fetchTours()}>Refresh</button>		<< If you got this one, fetchTour will be auto trigger (without the click) as soon as tours.length === 0.


react-icons
==================
import { FaGithubSquare } from "react-icons/fa";
    <FaGithubSquare className='icon' />

.icon {
    font-size: 4rem;
    color: red;
}
















